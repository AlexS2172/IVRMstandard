
// Wizard-generated connection point proxy class
// WARNING: This file may be regenerated by the wizard


#pragma once

template<class T>
class CProxy_IStructureProviderExEvents :
	public IConnectionPointImpl<T, &__uuidof(_IStructureProviderExEvents)>
{
public:
	HRESULT Fire_OnStock(StockParams * Params, StockResultsEx * Results)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

			if (pConnection)
			{
				CComVariant avarParams[2];
				//avarParams[1] = Params;
				//avarParams[0] = Results;
				_StockUpdateParams rp;
				rp.Init();
				MakeCopy(rp,*Params);
				rp.CopyTo(avarParams[1]);
				_StockUpdateInfo rr;
				rr.Init();
				MakeCopy(rr,*Results);
				rr.CopyTo(avarParams[0]);
				CComVariant varResult;

				DISPPARAMS params = { avarParams, NULL, 2, 0 };
				hr = pConnection->Invoke(0x1, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, &varResult, NULL, NULL);
			}
		}
		return hr;
	}
	HRESULT Fire_OnOption(OptionParams * Params, OptionResultsEx * Results, BOOL IsLastOption)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

			if (pConnection)
			{
				CComVariant avarParams[3];
				_OptionUpdateParams rp;
				rp.Init();
				MakeCopy(rp,*Params);
				rp.CopyTo(avarParams[2]);
				_OptionUpdateInfo rr;
				rr.Init();
				MakeCopy(rr,*Results);
				rr.CopyTo(avarParams[1]);
				//avarParams[2] = Params;
				//avarParams[1] = Results;
				avarParams[0] = IsLastOption;
				avarParams[0].vt = VT_BOOL;
				CComVariant varResult;

				DISPPARAMS params = { avarParams, NULL, 3, 0 };
				hr = pConnection->Invoke(0x2, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, &varResult, NULL, NULL);
			}
		}
		return hr;
	}
	HRESULT Fire_OnError(long ErrorNumber, BSTR Description, long ReqType, VARIANT Request)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

			if (pConnection)
			{
				CComVariant avarParams[4];
				avarParams[3] = ErrorNumber;
				avarParams[3].vt = VT_I4;
				avarParams[2] = Description;
				avarParams[2].vt = VT_BSTR;
				avarParams[1] = ReqType;
				avarParams[1].vt = VT_I4;
				avarParams[0] = Request;
				CComVariant varResult;

				DISPPARAMS params = { avarParams, NULL, 4, 0 };
				hr = pConnection->Invoke(0x3, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, &varResult, NULL, NULL);
			}
		}
		return hr;
	}
	HRESULT Fire_OnFuture(FutureParams * Params, FutureResultsEx * Results)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

			if (pConnection)
			{
				CComVariant avarParams[2];
				_FutureUpdateParams rp;
				rp.Init();
				MakeCopy(rp,*Params);
				rp.CopyTo(avarParams[1]);
				_FutureUpdateInfo rr;
				rr.Init();
				MakeCopy(rr,*Results);
				rr.CopyTo(avarParams[0]);
				//avarParams[1] = Params;
				//avarParams[0] = Results;
				CComVariant varResult;

				DISPPARAMS params = { avarParams, NULL, 2, 0 };
				hr = pConnection->Invoke(0x4, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, &varResult, NULL, NULL);
			}
		}
		return hr;
	}
	HRESULT Fire_OnFutureByRoot(FutureRootParams * Params, FutureResultsEx * Results, BOOL IsLastFutures)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

			if (pConnection)
			{
				CComVariant avarParams[3];
				//avarParams[2] = Params;
				//avarParams[1] = Results;
				_FutureRootUpdateParams rp;
				rp.Init();
				MakeCopy(rp,*Params);
				rp.CopyTo(avarParams[2]);
				_FutureUpdateInfo rr;
				rr.Init();
				MakeCopy(rr,*Results);
				rr.CopyTo(avarParams[1]);
				avarParams[0] = IsLastFutures;
				avarParams[0].vt = VT_BOOL;
				CComVariant varResult;

				DISPPARAMS params = { avarParams, NULL, 3, 0 };
				hr = pConnection->Invoke(0x5, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, &varResult, NULL, NULL);
			}
		}
		return hr;
	}
	HRESULT Fire_OnFuturesOption(FuturesOptionParams * Params, FuturesOptionResultsEx * Results, BOOL IsLastOption)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IDispatch * pConnection = static_cast<IDispatch *>(punkConnection.p);

			if (pConnection)
			{
				CComVariant avarParams[3];
				_FutureOptionUpdateParams rp;
				rp.Init();
				MakeCopy(rp,*Params);
				rp.CopyTo(avarParams[2]);
				_FutureOptionUpdateInfo rr;
				rr.Init();
				MakeCopy(rr,*Results);
				rr.CopyTo(avarParams[1]);
				//avarParams[2] = Params;
				//avarParams[1] = Results;
				avarParams[0] = IsLastOption;
				avarParams[0].vt = VT_BOOL;
				CComVariant varResult;

				DISPPARAMS params = { avarParams, NULL, 3, 0 };
				hr = pConnection->Invoke(0x6, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &params, &varResult, NULL, NULL);
			}
		}
		return hr;
	}
};

